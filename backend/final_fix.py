import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from Database.DB_connection import engine
from sqlalchemy import text
import subprocess
import time

def fix_database_final():
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        with engine.connect() as conn:
            # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞ price
            print("1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞ price...")
            try:
                conn.execute(text('ALTER TABLE "Properties" ALTER COLUMN price TYPE bigint USING price::bigint;'))
                print("   ‚úÖ –¢–∏–ø —Å—Ç–æ–ª–±—Ü–∞ price –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å price: {e}")
            
            # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ Properties
            print("2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±—Ü—ã Properties...")
            columns_to_add = [
                ('complex_id', 'INTEGER REFERENCES residential_complexes(id)'),
                ('zastroy_id', 'INTEGER REFERENCES "Law_faces"(id)')
            ]
            
            for col_name, col_type in columns_to_add:
                try:
                    result = conn.execute(text(f"""
                        SELECT column_name FROM information_schema.columns 
                        WHERE table_name = 'Properties' AND column_name = '{col_name}'
                    """))
                    if not result.fetchone():
                        conn.execute(text(f'ALTER TABLE "Properties" ADD COLUMN {col_name} {col_type};'))
                        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {col_name}")
                    else:
                        print(f"   ‚úÖ –°—Ç–æ–ª–±–µ—Ü {col_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å {col_name}: {e}")
            
            # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É Bookings
            print("3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É Bookings...")
            try:
                result = conn.execute(text("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'Bookings' AND column_name = 'booking_date'
                """))
                if not result.fetchone():
                    conn.execute(text('ALTER TABLE "Bookings" ADD COLUMN booking_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP;'))
                    print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü booking_date")
                else:
                    print("   ‚úÖ –°—Ç–æ–ª–±–µ—Ü booking_date —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å booking_date: {e}")
            
            # 4. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É apartment_events –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            print("4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É apartment_events...")
            try:
                result = conn.execute(text("""
                    SELECT table_name FROM information_schema.tables 
                    WHERE table_name = 'apartment_events'
                """))
                if not result.fetchone():
                    conn.execute(text('''
                        CREATE TABLE apartment_events (
                            id SERIAL PRIMARY KEY,
                            apartment_id INTEGER NOT NULL,
                            user_id VARCHAR(255) NOT NULL,
                            event_type VARCHAR(100) NOT NULL,
                            event_value FLOAT,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    '''))
                    print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ apartment_events")
                else:
                    print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ apartment_events —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å apartment_events: {e}")
            
            # 5. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ residential_complexes
            print("5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±—Ü—ã residential_complexes...")
            try:
                result = conn.execute(text("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'residential_complexes' AND column_name = 'zastroy_id'
                """))
                if not result.fetchone():
                    conn.execute(text('ALTER TABLE residential_complexes ADD COLUMN zastroy_id INTEGER REFERENCES "Law_faces"(id);'))
                    print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü zastroy_id –≤ residential_complexes")
                else:
                    print("   ‚úÖ –°—Ç–æ–ª–±–µ—Ü zastroy_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ residential_complexes")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å zastroy_id –≤ residential_complexes: {e}")
            
            conn.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    return True

def start_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        os.chdir(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        process = subprocess.Popen([
            "uvicorn", "backend.main:app", "--reload", "--host", "127.0.0.1", "--port", "8000"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:8000")
        print("üìù –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞:")
        
        # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞
        while True:
            output = process.stdout.readline()
            if output:
                print(output.decode().strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            if process.poll() is not None:
                break
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    print("üîß –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã DIMA")
    print("=" * 50)
    
    if fix_database_final():
        print("\nüéâ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π:")
        print("uvicorn backend.main:app --reload")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL") 